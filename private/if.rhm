#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s

export:
  rename:
    shif as if
    shcond as cond

expr.macro 'shif $tst ...
            | $thn ...
            | $els ...':
  ~op_stx self
  let '$(tst :: expr_meta.Parsed)' = '$tst ...'
  let '$(thn :: expr_meta.Parsed)' = '$thn ...'
  let '$(els :: expr_meta.Parsed)' = '$els ...'
  let tv = t.gen_tvar(#false)
  t.unify_do(tst, t.Bool(self), t_s.lookup_type(tst))
  t.unify_do(tst, t_s.lookup_type(thn), tv)
  t.unify_do(tst, t_s.lookup_type(els), tv)
  t_s.wrap_type('if $tst | $thn | $els', tv)

expr.macro
| 'shcond
   | $tst ...:
       $(body :: Group)
   | ...
   | ~else:
       $(els :: Group)':
    ~op_stx self
    let ['$(tst :: expr_meta.Parsed)', ...] = ['$tst ...', ...]
    let ['$(body :: expr_meta.Parsed)', ...] = [body, ...]
    let '$(els :: expr_meta.Parsed)' = els
    let tv = t.gen_tvar(#false)
    Function.pass(t.unify_do(tst, t.Bool(self), t_s.lookup_type(tst)), ...)
    Function.pass(t.unify_do(tst, tv, t_s.lookup_type(body)), ...)
    t.unify_do(els, tv, t_s.lookup_type(els))
    t_s.wrap_type('$('cond'.relocate(self))
                   | $tst: $body
                   | ...
                   | ~else: $els',
                  tv)
| 'shcond
   | $tst ...:
       $(body :: Group)
   | ...':
    ~op_stx self
    let ['$(tst :: expr_meta.Parsed)', ...] = ['$tst ...', ...]
    let ['$(body :: expr_meta.Parsed)', ...] = [body, ...]
    let tv = t.gen_tvar(self)
    Function.pass(t.unify_do(tst, t.Bool(self), t_s.lookup_type(tst)), ...)
    Function.pass(t.unify_do(tst, tv, t_s.lookup_type(body)), ...)
    t_s.wrap_type('$('cond'.relocate(self))
                   | $tst: $body
                   | ...',
                  tv)
