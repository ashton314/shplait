#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "box.rhm" open
    "id_map.rhm" open
  "type_statinfo.rhm" as t_s

space.enforest type_expr:
  space_path shplait/type
  macro_definer macro
  meta_namespace type_expr_meta:
   parse_syntax_class Parsed
   parsed_packer _pack
   parsed_unpacker _unpack
   parse_checker: fun (stx, proc):
                    if _unpack(stx, fun (_): #false)
                    | stx
                    | match stx
                      | '$(t :: type_expr_meta.Parsed)': t
   export:
     pack
     unpack
   fun pack(t :: t.Type):
     _pack(t_s.type_to_syntax(t))
   fun unpack(stx):
     t_s.syntax_to_type(_unpack(stx))

export:
  only_space type_expr:
    Num
    Str
    Bool
    #'

module parse:
  export:
    meta:
      parse

meta:
  def current_tvars_box = Parameter.make(IdMap{})
  def current_tvar_lookup = Parameter.make(fun (_): #false)

type_expr.macro 'Num':
  ~op_stx self
  type_expr_meta.pack(t.Num(self))

type_expr.macro 'Str':
  ~op_stx self
  type_expr_meta.pack(t.Str(self))

type_expr.macro 'Bool':
  ~op_stx self
  type_expr_meta.pack(t.Bool(self))

type_expr.macro '#' $(id :: Identifier)':
  ~op_stx self
  let tvars_box :: Box = current_tvars_box()
  let tvars :: IdMap = tvars_box.val
  let tv:
    tvars[id]
      || current_tvar_lookup()(id)
      || (block:
            let tv = t.gen_tvar('$self $id')
            tvars_box.val := tvars ++ IdMap{id: tv}
            tv)
  type_expr_meta.pack(tv)

meta:
  fun parse(stx, src, tvars_box, lookup_tvar):
    parameterize { current_tvars_box: tvars_box,
                   current_tvar_lookup: lookup_tvar}:
      match stx
      | '': t.gen_tvar(src)
      | '$(t :: type_expr_meta.Parsed)': type_expr_meta.unpack(t)
