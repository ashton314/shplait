#lang rhombus/static/and_meta
import:
  meta:
    "id_map.rhm" open
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "type_expr.rhm"!parse as tyex

export:
  meta:
    Frame
    get_current_frame
    parse_type
    finish_current_frame
    record_frame_defn_type
  relet_frame

meta:
  class Frame(mutable datatypes :: IdMap = IdMap{},
              mutable opaques :: IdMap = IdMap{},
              mutable aliases :: IdMap = IdMap{},
              mutable defn_types = [],
              mutable variants :: IdMap = IdMap{},
              ~parent: mutable parent :: maybe(Frame) = #false,
              mutable children :: List = [],
              ~poly_context: mutable poly_context :: List,
              ~tvars: tvars :~ IdMap = IdMap{}):
    constructor(~parent: parent = #false,
                ~tvars: tvars = IdMap{}):
      let fr = super(~parent: parent,
                     ~poly_context: [Symbol.gen("poly"),
                                     & (if parent
                                        | Frame.poly_context(parent)
                                        | [])],
                     ~tvars: tvars)
      when parent
      | let parent :: Frame = parent
        parent.children := [fr, &parent.children]
      fr

    method all_tvars() :: Set:
      let base:
        if parent
        | Frame.all_tvars(parent)
        | Set{}
      (base :~ Set) ++ tvars.val_set()

syntax_parameter.bridge frame: Frame()

defn.macro 'relet_frame: $expr':
  'syntax_parameter.relet frame: $expr'

meta:
  fun get_current_frame() :~ Frame:
    syntax_parameter_meta.lookup('frame')

  fun get_current_type():
    let v = syntax_parameter_meta.lookup('tvar')
    v || t.gen_tvar(#false)

  fun parse_type(stx, src, tvars_box):
    tyex.parse(stx, src, tvars_box,
               fun (id):
                 recur loop (fr :: Frame = get_current_frame()):
                   fr.tvars[id] || (fr.parent && loop(fr.parent)))

  fun finish_current_frame():
    let fr = get_current_frame()
    t.let_based_poly_do(fr.defn_types, 100)

  fun record_frame_defn_type(id, ty):
    let fr = get_current_frame()
    fr.defn_types := [[id, ty], & fr.defn_types]
