#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s

// Wrap Rhombus's syntax patterns and templates to check
// types, which means our own layer of repetition binding.
// Repetitions from syntax patterns can only be used
// in syntax templates (i.e., no generalized repetition forms)

export:
  rename:
    shquotes as #%quotes
  only_space expr:
    $
// more exports macro-generated for `syntax_is_number`, etc.

module convert:
  export:
    meta:
      convert_pat
    syntax_def

expr.macro '«shquotes $(quoted_tmpl && '«'$tmpl'»')»':
  ~op_stx self
  let [tmpl_cvt, [[id, tmp_id, depth], ...]] = convert_tmpl(tmpl)
  t_s.wrap_type('«block:
                    def $(nest_rep(tmp_id, depth)) = reference_syntax_pattern_var($id, $depth)
                    ...
                    #%quotes '$tmpl_cvt'»'.relocate_span([quoted_tmpl]),
                t.Shrub(quoted_tmpl))

meta:
  fun convert(pat, handle_id, handle_escape):
    fun group(pat, depth, is_before_dots):
      fun dots(hd, tl):
        let [tm_pat_cvt, tm_ids] = group(hd, depth+1, #true)
        let [g_pat_cvt, g_ids] = group(tl, depth, #false)
        ['$tm_pat_cvt $('...') $g_pat_cvt', [&tm_ids, &g_ids]]
      match pat:
      | '':
          ['', []]
      | '$(op && '...') $_ ...':
          syntax_meta.error("misplaced ellipses", op)
      | '$(op && '$') $id $('...') $tail ...':
          dots('$op $id', '$tail ...')
      | '$tm $('...') $tail ...':
          dots(tm, '$tail ...')
      | '$(op && '$') $expr $tail ...' when handle_escape && (depth == 0):
          let [pat_cvt, ids] = group('$tail ...', depth, is_before_dots)
          ['$(Syntax.relocate('$', op)) $(handle_escape(expr)) $pat_cvt', ids]
      | '$(op && '$') $id $tail ...':
          unless id is_a Identifier
          | syntax_meta.error("expected an identifier after `$` at ellipsis depth " +& depth,
                              id)
          let [pat_cvt, ids] = group('$tail ...', depth, is_before_dots)
          let tmpl = Syntax.make_temp_id(id)
          ['$(Syntax.relocate('$', op)) $(handle_id(tmpl, is_before_dots)) $pat_cvt',
           [[id, tmpl, depth], &ids]]
      | '$(op && '$') $_ ...':
          syntax_meta.error("misplaced escape", op)
      | '| $alt | ...':
          let ['$pat; ...', ids] = multi('$alt ; ...', depth)
          ['| $pat | ...', ids]
      | '$tm $tail ...':
          let [tm_cvt, tm_ids] = term(tm, depth)
          let [pat_cvt, ids] = group('$tail ...', depth, is_before_dots)
          ['$tm_cvt $pat_cvt', [& tm_ids, & ids]]
    fun multi(pat, depth):
      match pat
      | '': ['', []]
      | '$(g :: Group)': group(pat, depth, #false)
      | '$g; $('...'); $tail; ...':
          let [g_pat_cvt,  g_ids] = group('$g', depth+1, #false)
          let [m_pat_cvt, m_ids] = multi('$tail; ...', depth)
          ['$g_pat_cvt; $('...'); $m_pat_cvt', [&g_ids, &m_ids]]
      | '$g; $tail; ...':
          let [g_pat_cvt, g_ids] = group('$g', depth, #false)
          let [m_pat_cvt, m_ids] = multi('$tail; ...', depth)
          ['$g_pat_cvt; $m_pat_cvt', [&g_ids, &m_ids]]      
    fun term(pat, depth):
      match pat
      | '($m)':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          ['($m_pat_cvt)', m_ids]
      | '[$m]':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          ['[$m_pat_cvt]', m_ids]
      | '{$m}':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          ['{$m_pat_cvt}', m_ids]
      | '«'$m'»':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          ['«'$m_pat_cvt'»', m_ids]
      | ': $m':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          [': $m_pat_cvt', m_ids]
      | '| $m
         | ...':
          let [[m_pat_cvt, m_ids], ...] = [multi(m, depth), ...]
          ['| $m_pat_cvt
            | ...',
           List.append(m_ids, ...)]
      | ~else:
          [pat, []]
    match pat:
    | '...': [pat, []]
    | '$': [pat, []]
    | ~else multi(pat, 0)
  fun convert_pat(pat):
    convert(pat,
            fun (id, is_before_dots):
              if is_before_dots
              | id
              | '($id :: Sequence)',
            #false)
  fun convert_tmpl(pat):
    convert(pat,
            fun (id, is_before_dots): id,
            fun (expr): '(reference_syntax($expr))')

syntax_class Sequence
| '$(_ :: Term) $(_ :: Term) ...'

expr.macro 'reference_syntax($(arg :: expr_meta.Parsed))':
  t.unify_do(arg, t_s.lookup_type(arg), t.Shrub(arg))
  'check_single_term($arg)'

fun check_single_term(stx :: Syntax):
  unless stx is_a Term
  | error("syntax object does not have a single term\n"
            +& "  syntax object: " +& stx) // FIXME: print syntax object as value
  stx

space.transform syntax_var:
  space_path shplait/syntax_var
  macro_definer macro
  meta_namespace syntax_var_meta:
    parse_syntax_class Parsed

meta:
  fun misuse_of_pattern_variable(id):
    syntax_meta.error("misuse of syntax variable (outside of quotes)", id)

defn.macro 'syntax_def $id: $pat_id $depth':
  '«
     expr.macro '$id':
       ~op_stx self
       $(if depth.unwrap() == 0
         | 't_s.wrap_type('$pat_id', t.Shrub(self))'
         | 'misuse_of_pattern_variable(self)')
     syntax_var.macro '$id':
       '($pat_id, $depth)'
    »'

meta:
  fun nest_rep(e, depth):
    if depth == 0
    | e
    | '[$(nest_rep(e, depth-1)), $('...')]'

expr.macro 'reference_syntax_pattern_var($id, $depth)':
  match id
  | '$(d :: syntax_var_meta.Parsed)':
      let '($pat_id, $pat_id_depth)' = d
      unless depth.unwrap() == pat_id_depth.unwrap()
      | syntax_meta.error("syntax variable is used at the wrong ellipsis depth\n"
                            +& "  used at depth: " +& depth +& "\n"
                            +& "  allowed only at depth: " +& pat_id_depth,
                          id)
      nest_rep(pat_id, depth.unwrap())
  | ~else:
      syntax_meta.error("identifier after `$` is not a syntax variable",
                        id)

fun oops(who, stx, what):
  error(who, "syntax object does not wrap a " +& what +& "\n"
               +& "  syntax object: " +& stx)

decl.nestable_macro 'extractor $is_x ($unwrap_x, $post_unwrap) ($wrap_x, $pre_wrap) $Ty $Ann $what':
  '«
     export: $is_x $unwrap_x $wrap_x
     def stx_is_x:
       fun $is_x(stx :~ Syntax):
         (stx is_a Term) && (stx.unwrap() is_a $Ann)
       $is_x
     def stx_unwrap_x:
       fun $unwrap_x(stx :~ Syntax):
         let v = if stx is_a Term | stx.unwrap() | #'~no
         if v is_a $Ann | $post_unwrap(v) | oops(#'$unwrap_x, stx, $what)
       $unwrap_x
     def stx_wrap_x:
       fun $wrap_x(v):
         Syntax.make($pre_wrap(v))
       $wrap_x
     expr.macro '$is_x':
       ~op_stx self
       t_s.wrap_type('stx_is_x', t.Arrow(self, [t.Shrub(self)], t.Bool(self)))
     expr.macro '$unwrap_x':
       ~op_stx self
       t_s.wrap_type('stx_unwrap_x', t.Arrow(self, [t.Shrub(self)], t . $Ty(self)))
     expr.macro '$wrap_x':
       ~op_stx self
       t_s.wrap_type('stx_wrap_x', t.Arrow(self, [t . $Ty(self)], t.Shrub(self)))
   »'
extractor syntax_is_number (syntax_to_number, values) (number_to_syntax, values) Num Number "number"
extractor syntax_is_boolean (syntax_to_boolean, values) (boolean_to_syntax, values) Bool Boolean "boolean"  
extractor syntax_is_symbol (syntax_to_symbol, values) (symbol_to_syntax, values) Sym Symbol "symbol"
extractor syntax_is_list (syntax_to_list, List.rest) (list_to_syntax, add_brackets) ListOfShrub ListShaped "list"

annot.macro 'ListShaped':
  'matching(['brackets', _, $'...'])'
fun add_brackets(lst): ['brackets', &lst]
