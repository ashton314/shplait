#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "id_map.rhm" open
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s

export:
  unify

expr.macro
| 'unify $mode $type:
     ~body: $(body :: Group)':
    'unify $mode $type:
       ~init_tvars: []
       ~defns:«»
       ~body: $(body :: Group)'
| 'unify $mode $type:
     ~init_tvars:
       [($id, $ty_stx), ...]
     ~defns:
       $defn
       ...
     ~body:
       $(body :: Group)':
    let tv = t.gen_tvar(#false)
    let b:
      'block:
         f.relet_frame: f.Frame(~parent:
                                  f.get_current_frame(),
                                ~tvars:
                                  IdMap{ '$id': $(t_s.syntax_to_type(ty_stx)), ... })
         $defn
         ...
         unify_phase_2 $mode $type:
           $body'
    t_s.wrap_type(b, tv)

expr.macro 'unify_phase_2 $mode $type:
              $(body :: Group)':
  let (expr, opaque_expr) = expr_meta.parse_all(body)
  let u_ty = t_s.syntax_to_type(type)
  let body_ty = t_s.lookup_type(expr)
  match mode
  | '~defn':
      t.unify_defn_do(expr, u_ty, body_ty)
  | ~else:
      t.unify_do(expr, u_ty, body_ty)
      // finishing the frame relies on the fact that the expander
      // will first fully expand all of the preceding definitions
      f.finish_current_frame()
  opaque_expr
