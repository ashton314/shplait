#lang rhombus/static/and_meta
import:
  rhombus
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "value.rhm".value_meta

export:
  rename:
    shvalues as values

module tuple:
  export Tuple

class Tuple(args :~ List):
  private implements Printable
  private override describe(mode, recur):
    PrintDesc.list("values(",
                   args.map(recur),
                   ")")

expr.macro 'shvalues $(args && '($(expr :: expr_meta.Parsed), ...)')':
  ~op_stx self
  if [expr, ...].length() == 1
  | [expr, ...][0]
  | let [ty, ...] = [t_s.lookup_type(expr), ...]
    t_s.wrap_type('Tuple([$expr, ...])'.relocate_span([self, args]),
                  t.TupleOf('$self $args', [ty, ...]))

value.macro
| 'shvalues ($(v :: value_meta.Parsed), ...)':
    t_s.type_to_syntax(t.TupleOf(#false, [t_s.syntax_to_type(v), ...]))
| 'shvalues ($_, ...)':
    '#false'
