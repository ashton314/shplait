#lang rhombus/static/and_meta
import:
  "def.rhm" as d
  "block.rhm" as b
  "value.rhm".value

export:
  rename:
    shlet as let
  letrec

value.non_macro shlet
value.non_macro letrec

expr.macro 'shlet $(id :: Identifier) = $rhs ...:
              $body':
  ~all_stx stx
  def tmp = Syntax.make_temp_id(id, ~keep_name: #true)
  '(b.block:
      d.def $tmp = $rhs ...
      $('(b.block:
            d.def $id = $tmp
            $(b.implicit_block(body)))'.relocate_span([stx])))'.relocate_span([stx])

expr.macro 'letrec $(id :: Identifier) = $rhs ...:
              $body':
  ~all_stx stx
  '(b.block:
      d.def $id = $rhs ...
      $(b.implicit_block(body)))'.relocate_span([stx])

