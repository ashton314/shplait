#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "id_map.rhm" open
  "argument.rhm" open
  "type_statinfo.rhm" as t_s
  "frame.rhm" as f
  "unify.rhm".unify
  "value.rhm".value
  "value.rhm".current_value_tvar_box
  "def.rhm".def as shdef
  "lazy.rhm" open
  "blacklist.rhm"

export:
  rename:
    function as fun
    call as #%call

meta:
  syntax_class MaybeType:
    kind ~sequence
    fields:
      type_seq
      op
  | '':
      field type_seq = ''
      field op = ''
  | '$(op && '::') $te ...':
      field type_seq = '$te ...'

meta:
  fun parse_function_type(stx, self, tvar_box):
    let '$_ ($arg, ...) $(res_type :: MaybeType):
           $body':
      stx
    for:
      each arg: [arg, ...]
      match arg
      | '$(arg_form :: Argument)': #void
    let '($(arg_form :: Argument), ...)' = '($arg, ...)'
    let [arg_id, ...] = [arg_form.id, ...]
    Function.pass(blacklist.validate(arg_id, "argument"), ...)
    let [arg_type, ...] = [f.parse_type(arg_form.type_seq, arg_form.op, arg_id, tvar_box), ...]
    let res_ty = f.parse_type(res_type.type_seq, res_type.op, self, tvar_box)
    values (t.Arrow(self, [arg_type, ...], res_ty),
            [arg_id, ...])

value.macro 'function ($arg, ...) $(res_type :: MaybeType):
               $(body :: Group)':
  ~op_stx self
  let stx = '$self ($arg, ...) $res_type:
               $body'
  let tvar_box = Box(IdMap{})
  let (arrow_type :: t.Arrow, [arg_id, ...]):
    parse_function_type(stx, self, current_value_tvar_box())
  t_s.type_to_syntax(arrow_type)
  
expr.macro 'function ($arg, ...) $(res_type :: MaybeType):
              $body':
  ~op_stx self
  ~all_stx stx
  let tvar_box = Box(IdMap{})
  let (arrow_type :: t.Arrow, [arg_id, ...]):
    parse_function_type(stx, self, tvar_box)
  let [arg_type, ...] = arrow_type.args
  let res_ty = arrow_type.result
  let { tv_id: tv_ty, ... } = IdMap.flatten(tvar_box.value)
  let [arg_tmp, ...] = [Syntax.make_temp_id(arg_id), ...]
  let expr:                                       
    '«
       $('fun'.relocate(self)) ($arg_tmp, ...):
         def $arg_id = $arg_tmp
         ...
         statinfo.macro '$arg_id': '(($t_s.type_key,
                                      $(t_s.type_to_syntax(arg_type))))'
         ...
         unify ~expr $(t_s.type_to_syntax(res_ty)):
           ~init_tvars: [($tv_id, $(t_s.type_to_syntax(tv_ty))), ...]
           ~defns:«»
           ~body:
             $body
     »'
  t_s.wrap_type(expr, stx, arrow_type)

defn.macro
| 'function $(id :: Identifier) ($arg, ...) $(res_type :: MaybeType):
     $body':
    ~op_stx self
    'shdef $id: $(self.relocate(id)) ($arg, ...) $res_type: $body'
| 'function ($arg, ...) $(res_type :: MaybeType):
     $body':
    ~op_stx self
    '($self ($arg, ...) $res_type: $body)'
  
expr.macro '$fn call $(args && '($(arg :: expr_meta.Parsed), ...)')':
  ~stronger_than: ~other
  ~op_stx self
  let res_tv = t.gen_tvar(fn)
  let [fn_ty, new_fn] = t_s.lookup_type(fn, #false)
  let [[arg_ty, new_arg], ...] = [t_s.lookup_type(arg, arg.group), ...]
  t.unify_do(fn,
             fn_ty,
             t.Arrow(fn,
                     [arg_ty, ...],
                     res_tv))
  let new_call = '(force($new_fn) (maybe_delay($arg.group, $new_arg), ...))'
  t_s.wrap_type(new_call.relocate_span([fn, self, args]), res_tv)
