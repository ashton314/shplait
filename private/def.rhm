#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s
  "block.rhm".block
  "unify.rhm".unify

export:
  rename:
    define as def

meta:
  fun build_def(self, id, rhs):
    let tv = t.gen_tvar('$id')  
    '«statinfo.macro '$id':
        '(($t_s.type_key, $(t_s.type_to_syntax(tv))))'
      def $id:
        dynamic(unify $(t_s.type_to_syntax(tv)) $self:
                  $rhs)»'

defn.macro
| 'define $(id :: Identifier) $(eql && '=') $rhs':
    ~op_stx self
    build_def(self, id, rhs)
| 'define $(id :: Identifier): $block':
    ~op_stx self
    build_def(self, id,
              // this is Shplait's `block`:
              'block: $block')
