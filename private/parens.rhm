#lang rhombus/static/and_meta
import:
  meta:
    "id_map.rhm" open
    "type.rhm" as t
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s

export:
  except_space expr:
    #%parens
  rename:
    shparens as #%parens
    type_assert as ::

expr.macro
| 'shparens ($e_t ... $(op && '::') $t_t ...) $tail ...':
    let '$(e :: expr_meta.Parsed)' = '$e_t ...'
    let fr = f.get_current_frame()
    let tvar_box = Box(fr.tvars)
    let ty = f.parse_type('$t_t ...', op, op, tvar_box)
    fr.tvars := tvar_box.value
    let [e_ty, new_e] = t_s.lookup_type(e, e.group)
    t.unify_do(op, e_ty, ty)
    values(t_s.wrap_type(new_e, ty),
           '$tail ...')
| 'shparens $parens $tail ...':
    ~op_stx self
    let '$(e :: expr_meta.Parsed)' = '#%parens $parens'
    values(e, '$tail ...')

expr.macro '$left type_assert':
  ~op_stx self
  syntax_meta.error("needs to be in a type position or in parentheses",
                    self)
  