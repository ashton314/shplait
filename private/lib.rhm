#lang shplait/private/core
~accomodating
// when a library function has different behavior
// as lazy versus eager (e.g., `map`), then use `is_lazy`
// here and put a copy of the function in "lazy_lib.rhm"

import:
  open: "lazy_select.rhm"
  "lazy_lib.rhm"

type Optionof(?a)
| none()
| some(val :: ?a)

fun add1(n): n+1
fun sub1(n): n-1

fun is_even(n): n mod 2 == 0
fun is_odd(n): n mod 2 == 1
               
fun is_cons(l):
  match l
  | []: #false
  | ~else: #true

fun is_empty(l):
  !is_cons(l)

fun length(lst):
  match lst
  | []: 0
  | cons(hd, tl): 1+length(tl)

fun list_get(lst, n):
  cond
  | n == 0: first(lst)
  | ~else: list_get(rest(lst), n-1)

fun append(lst, lst2):
  match lst
  | []: lst2
  | cons(hd, tl): cons(hd, append(tl, lst2))

fun reverse(lst):
  block:
    fun accum_rev(lst, rev):
      match lst
      | []: []
      | cons(hd, tl): accum_rev(tl, cons(hd, rev))
    accum_rev(lst, [])

lazy_select map: eager_map lazy_lib.map 
fun eager_map(f :: ?a -> ?b, lst :: Listof(?a)) :: Listof(?b):
  match lst
  | []: []
  | cons(hd, tl): cons(f(hd), eager_map(f, tl))

lazy_select map2: eager_map2 lazy_lib.map2
fun eager_map2(f :: (?a, ?b) -> ?c, alst :: Listof(?a), blst :: Listof(?b)) :: Listof(?c):
  match alst
  | []:
      match blst
      | []: []
      | ~else: error(#'map2, "too many elements in second list")
  | cons(ahd, atl):
      match blst
      | cons(bhd, btl): cons(f(ahd, bhd), eager_map2(f, atl, btl))
      | ~else: error(#'map2, "not enough elements in second list")

fun member(elem, lst):
  match lst
  | []: #false
  | cons(hd, tl): elem == hd || member(elem, tl)

lazy_select filter: eager_filter lazy_lib.filter
fun eager_filter(pred, lst):
  match lst
  | []: []
  | cons(hd, tl): if pred(hd)
                  | cons(hd, eager_filter(pred, tl))
                  | eager_filter(pred, tl)

lazy_select foldl: eager_foldl lazy.foldl
fun eager_foldl(f, accum, lst):
  match lst
  | []: accum
  | cons(hd, tl): eager_foldl(f, f(hd, accum), tl)

lazy_select foldr: eager_foldr lazy_lib.foldr
fun eager_foldr(f, init, lst):
  match lst
  | []: init
  | cons(hd, tl): f(hd, eager_foldr(f, init, tl))

fun fst(tup):
  block:
    def values(f, s) = tup
    f

fun snd(tup):
  block:
    def values(f, s) = tup
    s

fun map_get(map, k):
  map_get_k(map, k, some, none)
