#lang shplait/private/core
~accomodating
// when a library function has different behavior
// as lazy versus eager (e.g., `map`), then implement
// it in both "eager_lib.rhm" and "lazy_lib.rhm"
// (probably the same code) and use `lazy_select` here

import:
  open: "lazy_select.rhm"
  "eager_lib.rhm"
  "lazy_lib.rhm"

type Optionof(?a)
| none()
| some(val :: ?a)

fun add1(n): n+1
fun sub1(n): n-1

fun is_even(n): n mod 2 == 0
fun is_odd(n): n mod 2 == 1
               
fun is_cons(l):
  match l
  | []: #false
  | ~else: #true

fun is_empty(l):
  !is_cons(l)

fun length(lst):
  match lst
  | []: 0
  | cons(hd, tl): 1+length(tl)

fun append(lst, lst2):
  match lst
  | []: lst2
  | cons(hd, tl): cons(hd, append(tl, lst2))

fun reverse(lst):
  block:
    fun accum_rev(lst, rev):
      match lst
      | []: []
      | cons(hd, tl): accum_rev(tl, cons(hd, rev))
    accum_rev(lst, [])

lazy_select map: eager_lib.map lazy_lib.map 
lazy_select map2: eager_lib.map2 lazy_lib.map2

fun member(elem, lst):
  match lst
  | []: #false
  | cons(hd, tl): elem == hd || member(elem, tl)

lazy_select filter: eager_lib.filter lazy_lib.filter
lazy_select foldl: eager_lib.foldl lazy.foldl
lazy_select foldr: eager_lib.foldr lazy_lib.foldr

fun fst(tup):
  block:
    def values(f, s) = tup
    f

fun snd(tup):
  block:
    def values(f, s) = tup
    s

fun map_get(map, k):
  map_get_k(map, k, some, none)
