#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "wrap.rhm" open
  "lazy.rhm" open

export:
  rename:
    symbol as #'
  string_to_symbol

expr.macro 'symbol $(id :: Identifier)':
  ~op_stx self
  t_s.wrap_type('(#' $id)'.relocate_span([self, id]), t.Sym('$self $id'))

value.macro 'symbol $(id :: Identifier)':
  ~op_stx self
  t_s.type_to_syntax(t.Sym(self))

defwrap wrap_string_to_symbol string_to_symbol(s):
  Symbol.from_string(dynamic_force(s))

expr.macro 'string_to_symbol':
  ~op_stx self
  t_s.wrap_type('wrap_string_to_symbol'.relocate(self),
                t.Arrow(self, [t.Str(self)], t.Sym(self)))