#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "id_map.rhm" open
  "pattern.rhm".pattern_meta
  "type_statinfo.rhm" as t_s
  "unify.rhm".unify
  "list.rhm".cons
  "list.rhm"!rep.SPair
  "syntax.rhm"!convert.convert_pat
  "syntax.rhm"!convert.syntax_def
  "syntax.rhm"!convert.syntax_unwrap
  "block.rhm".implicit_block
  "lazy.rhm" open
  "denylist.rhm"
  "value.rhm".value

export:
  rename:
    shmatch as match
    shis_a as is_a

value.non_macro shmatch

meta:
  syntax_class ListClauses:
    fields:
      empty_body
      f_id
      r_id
      cons_body
  | '| []: $empty_body
     | $(bound_as expr_meta.space: 'cons')($(f_id :: Identifier), $(r_id :: Identifier)): $cons_body'
  | '| $(bound_as expr_meta.space: 'cons')($(f_id :: Identifier), $(r_id :: Identifier)): $cons_body
     | []: $empty_body'
  | '| []: $empty_body
     | ~else: $cons_body':
      field f_id: 'f'
      field r_id: 'r'
  | '| $(bound_as expr_meta.space: 'cons')($(f_id :: Identifier), $(r_id :: Identifier)): $cons_body
     | ~else: $empty_body'

  syntax_class OneListClause:
  | '[]: $empty_body'
  | '$(bound_as expr_meta.space: 'cons')($(f_id :: Identifier), $(r_id :: Identifier)): $cons_body'

  syntax_class SyntaxClauses:
    fields:
      [pat, ...]
      [body, ...]
      else_body
  | '«| '$pat': $body
      | ...»':
      field else_body = #false
  | '«| '$pat': $body
      | ...
      | ~else: $else_body»'

  syntax_class.together:
    syntax_class LiteralPattern:
      fields:
        parsed
      kind: ~sequence
    | '$(n :: Int)':
        field parsed = '(#%literal $n)'.relocate_span([n])
    | '$(n :: Int) $(op && '||') $(lits :: LiteralPattern)':
        field parsed = '(#%literal $n || $lits.parsed)'.relocate_span([n, op, lits])

  syntax_class CaseClauses:
    fields:
      [lits, ...]
      [body, ...]
      else_body
  | '«| $(lits_in :: LiteralPattern): $body
      | ...»':
      field else_body = #false
      field [lits, ...] = [lits_in.parsed, ...]
  | '«| $(lits_in :: LiteralPattern): $body
      | ...
      | ~else: $else_body»':
      field [lits, ...] = [lits_in.parsed, ...]

expr.macro
| 'shmatch $expr ...
   | ~else: $body':
    ~op_stx self
    ~all_stx stx
    parse_else_match(self, stx,
                     '$expr ...',
                     body)
| 'shmatch $expr ... $(lcs :: ListClauses)':
    ~op_stx self
    ~all_stx stx
    parse_list_match(self, stx,
                     '$expr ...',
                     lcs.empty_body,
                     lcs.f_id, lcs.r_id, lcs.cons_body)
| 'shmatch $('$tail ...'
               && '$expr ... | $(lc :: OneListClause)')':
    ~op_stx self
    syntax_meta.error("incomplete set of list clauses", '$self $tail ...')
| 'shmatch $expr ... $(scs :: SyntaxClauses)':
    ~op_stx self
    ~all_stx stx
    parse_syntax_match(self, stx,
                       '$expr ...',
                       [scs.pat, ...],
                       [scs.body, ...],
                       scs.else_body)
| 'shmatch $expr ... $(ccs :: CaseClauses)':
    ~op_stx self
    ~all_stx stx
    parse_case_match(self, stx,
                     '$expr ...',
                     [ccs.lits, ...],
                     [ccs.body, ...],
                     ccs.else_body)
| 'shmatch $expr ...
   | $(ctr :: Identifier) ($(field :: Identifier), ...):
       $body
   | ...
   | $(else_kw && '~else'):
       $else_body':
    ~op_stx self
    ~all_stx stx
    parse_match(self, stx, else_kw,
                '$expr ...',
                [[ctr, [field, ...]], ...],
                [body, ...],
                else_body)
| 'shmatch $expr ...
   | $(ctr :: Identifier) ($(field :: Identifier), ...):
       $body
   | ...':
    ~op_stx self
    ~all_stx stx
    parse_match(self, stx, #false,
                '$expr ...',
                [[ctr, [field, ...]], ...],
                [body, ...],
                #false)
| 'shmatch $('$tail ...'
               && '$expr ...
                   | $(clause :: Block)
                   | ...')':
    ~op_stx self
    let stx = '$self $tail ...'
    // try to provide a helpful error message
    Function.pass(check_clause_shape(clause, stx), ...)
    syntax_meta.error("unrecognized mixture of clauses", stx)
| 'shmatch $x ...':
    ~op_stx self
    syntax_meta.error("bad syntax", '$self $x ...')

meta:
  fun parse_list_match(self, stx,
                       expr_in,
                       empty_body,
                       f_id, r_id, cons_body):
    denylist.validate(f_id, "variable")
    denylist.validate(r_id, "variable")
    let '$(expr :: expr_meta.Parsed)':
      match expr_in
      | '': syntax_meta.error("missing target expr", self)
      | ~else: expr_in
    let elem_tv = t.gen_tvar(#false)
    let [expr_ty, new_expr] = t_s.lookup_type(expr, expr.group)
    t.unify_do(expr_in, expr_ty, t.ListOf(self, elem_tv))
    let tv = t.gen_tvar(#false)
    let r:
      '«match force($new_expr)
        | []: unify ~expr $(t_s.type_to_syntax(tv)):
                ~body:
                  $(implicit_block(empty_body))
        | SPair(first, rest):
            def $f_id = first
            def $r_id = dynamic(rest)
            statinfo.macro '$f_id': '(($t_s.type_key, $(t_s.type_to_syntax(elem_tv))))'
            statinfo.macro '$r_id': '(($t_s.type_key, $(t_s.type_to_syntax(t.ListOf(self, elem_tv)))))'
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(cons_body))»'
    t_s.wrap_type(r, self, tv)

  fun parse_syntax_match(self, stx,
                         expr_in,
                         [pat, ...],
                         [body, ...],
                         else_body):
    let '$(expr :: expr_meta.Parsed)':
      match expr_in
      | '': syntax_meta.error("missing target expr", self)
      | ~else: expr_in
    let [expr_ty, new_expr] = t_s.lookup_type(expr, expr.group)
    t.unify_do(expr_in, expr_ty, t.Shrub(self))
    let tv = t.gen_tvar(#false)
    let [[pat_cvt, [[pat_id, pat_cvt_tmpl, pat_depth], ...]], ...]: [convert_pat(pat, #true), ...]
    Function.pass(denylist.validate(pat_id, "pattern variable"), ..., ...)
    let [else, ...]:
      if else_body
      | ['~else:
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(else_body))']
      | []
    let r:
      '«match syntax_unwrap(force($new_expr))
        | '$pat_cvt':
            syntax_def $pat_id: $pat_cvt_tmpl $pat_depth
            ...
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(body))
        | ...
        | $else
        | ...»'
    t_s.wrap_type(r, stx, tv)

  fun parse_case_match(self, stx,
                       expr_in,
                       [lits, ...],
                       [body, ...],
                       else_body):
    let '$(expr :: expr_meta.Parsed)':
      match expr_in
      | '': syntax_meta.error("missing target expr", self)
      | ~else: expr_in
    let [expr_ty, new_expr] = t_s.lookup_type(expr, expr.group)
    t.unify_do(expr_in, expr_ty, t.Num(self))
    let tv = t.gen_tvar(#false)
    let [else, ...]:
      if else_body
      | ['~else:
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(else_body))']
      | []
    let r:
      '«$('match'.relocate_span([self])) $new_expr
        | $lits:
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(body))
        | ...
        | $else
        | ...»'
    t_s.wrap_type(r, stx, tv)

  fun parse_match(self, stx, else_kw,
                  expr_in,
                  [[ctr, [field, ...]], ...],
                  [body, ...],
                  else_body):
    Function.pass(denylist.validate(field, "variable"), ..., ...)
    let '$(expr :: expr_meta.Parsed)':
      match expr_in
      | '': syntax_meta.error("missing target expr", self)
      | ~else: expr_in
    let [[dt_id, dt_arg_n, pat_id, pat_ctr_ty,], ...]:
      for List:
        each ctr: [ctr, ...]
        fun fail():
          syntax_meta.error("expected a variant name", self, ctr)
        match ctr
        | '$(pat :: pattern_meta.Parsed)':
            pattern_meta.unpack(pat) || fail()
        | ~else fail()
    let the_dt_id = [dt_id, ...][0]    
    let the_dt_arg_n = [dt_arg_n, ...][0]
    check_variants_consistent(self, [ctr, ...], [dt_id, ...], the_dt_id)
    check_variants_complete(self, [ctr, ...], the_dt_id, else_kw)
    let dt_args:
      for List:
        each i: 0..the_dt_arg_n
        t.gen_tvar(expr_in)
    let dt_ty = t.Datatype(self, the_dt_id, dt_args)
    let [expr_ty, new_expr] = t_s.lookup_type(expr, expr.group)
    t.unify_do(self, expr_ty, dt_ty)    
    let [[pat_ty, ...], ...]: [t.Arrow.args(t.instantiate_constructor_at(pat_ctr_ty, dt_ty)), ...]
    let [[arg_id, ...], ...] = [[Syntax.make_temp_id(pat_ty), ...], ...]
    for:
      each:
        ctr: [ctr, ...]
        pat_id: [pat_id, ...]
        [pat_ty, ...]: [[pat_ty, ...], ...]
        [field, ...]: [[field, ...], ...]
      when [pat_ty, ...].length() != [field, ...].length()
      | syntax_meta.error("wrong field count", self, ctr)
    let tv = t.gen_tvar(#false)
    let [[field_tv, ...], ...] = [[t.gen_tvar(field), ...], ...]
    Function.pass(t.unify_do(field, field_tv, pat_ty), ..., ...)
    let [else, ...]:
      if else_body
      | ['~else:
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(else_body))']
      | []
    let r:
      '«match force($new_expr)
        | $pat_id($arg_id, ...):
            def $field = $arg_id
            ...
            statinfo.macro '$field': '(($t_s.type_key, $(t_s.type_to_syntax(field_tv))))'
            ...
            unify ~expr $(t_s.type_to_syntax(tv)):
              ~body:
                $(implicit_block(body))
        | ...
        | $else
        | ...»'
    t_s.wrap_type(r, stx, tv)

  // special case for just `~else`, makes no requirements on `expr_in` type
  fun parse_else_match(self, stx, expr_in, body):
    let '$(expr :: expr_meta.Parsed)':
      match expr_in
      | '': syntax_meta.error("missing target expr", self)
      | ~else: expr_in
    let tv = t.gen_tvar(#false)
    t_s.wrap_type('block:
                     $expr
                     unify ~expr $(t_s.type_to_syntax(tv)):
                       ~body:
                         $(implicit_block(body))',
                  stx,
                  tv)

expr.macro '$left shis_a $(ctr :: Identifier)':
  ~op_stx self
  let [dt_id, dt_arg_n, pat_id, pat_ctr_ty,]:
    fun fail():
      syntax_meta.error("expected a variant name", self, ctr)
    match ctr
    | '$(pat :: pattern_meta.Parsed)':
        pattern_meta.unpack(pat) || fail()
    | ~else fail()
  let dt_args:
      for List:
        each i: 0..dt_arg_n
        t.gen_tvar(left)
  let dt_ty = t.Datatype(self, dt_id, dt_args)
  let [left_ty, new_left] = t_s.lookup_type(left, #false)
  t.unify_do(self, left_ty, dt_ty)
  t_s.wrap_type('force($new_left) is_a $pat_id',
                t.Bool(self))

meta:
  syntax_class MustBeIdentifier(stx):
  | '$(id :: Identifier)'
  | '$(id :: Identifier) $next $tail ...':
      syntax_meta.error("unexpected term after identifier", stx, next)
  | '$m':
      match_unless m is_a Identifier
      syntax_meta.error("expected an identifier", stx, m)

  fun check_clause_shape(clause, stx):
    match clause
    | ': []: $body': #void
    | ': [] $tail ...':
        syntax_meta.error("bad empty-list clause", stx, clause)
    | ': $(bound_as expr_meta.space: 'cons')($(f_id :: MustBeIdentifier(stx)), $(r_id :: MustBeIdentifier(stx))):
           $cons_body':
        #void
    | ': $(bound_as expr_meta.space: 'cons') $tail ...':
        syntax_meta.error("bad cons clause", stx, clause)
    | ': $(ctr :: Identifier) ($(field :: MustBeIdentifier(stx)), ...):
           $body':
        #void
    | ': «'$pat': $body»':
        #void
    | ': $(_ :: LiteralPattern): $body':
        #void
    | ': $_ ... | $body | ...':
        syntax_meta.error("expected a pattern followed by a `:` block (and not with `|` immediately in the block)", stx, clause)
    | ': ~else $a ...':
        syntax_meta.error("expected a `:` immediately after `~else`", stx, '$a ...')
    | ': $_ ...: $_':
        syntax_meta.error("bad clause", stx, clause)
    | ~else:
        syntax_meta.error("expected a pattern followed by a `:` block", stx, clause)

  fun check_variants_consistent(self, [ctr, ...], [dt_id, ...], the_dt_id):
    for values(seen = IdMap{}):
      each:
        ctr: [ctr, ...]
        dt_id: [dt_id, ...]
      unless syntax_meta.equal_binding(dt_id, the_dt_id)
      | syntax_meta.error("variant not from the same type as earlier variants", self, ctr)
      when seen[ctr]
      | syntax_meta.error("duplicate case for variant", self, ctr)
      seen ++ IdMap{ ctr: #true }

  fun check_variants_complete(self, [ctr, ...], the_dt_id, else_kw):
    let dt_variants :~ List.of(Identifier):
      let '$(dt_pat ::  pattern_meta.Parsed)': the_dt_id
      pattern_meta.unpack_type(dt_pat)
    let all_here = [ctr, ...].length() == dt_variants.length()
    if else_kw
    | when all_here
      | syntax_meta.error("else case is unreachable", self, else_kw)
    | unless all_here
      | let missing_var:
          for any:
            each dt_var: dt_variants
            !(for any:
                each ctr: [ctr, ...]
                syntax_meta.equal_binding(ctr, dt_var))
              && dt_var
        syntax_meta.error("missing '" +& missing_var +& "' case", self)
