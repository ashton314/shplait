#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s
  "lazy.rhm" open

decl.macro 'def_binary $name $op $type_constr: $option; ...':
  '«export: rename: $name as $op
    expr.macro '$('$')left $name $('$')right':
      ~op_stx self
      $option
      ...
      t.unify_do(left, t_s.lookup_type(left), t.Num(self))
      t.unify_do(right, t_s.lookup_type(right), t.Num(self))
      t_s.wrap_type('force($('$')left) $op force($('$')right)',
                    t. $type_constr ('$('$')left $('$')self $('$')right'))»'

def_binary shplus + Num:
  ~weaker_than shtimes shdiv shmod
  ~same_as shminus
def_binary shminus - Num:
  ~weaker_than shtimes shdiv shmod
def_binary shtimes * Num:
  ~same_on_left_as shdiv shmod
def_binary shdiv / Num:«»
def_binary shmod mod Num:«»

def_binary shlt < Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod
def_binary shgt > Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod
def_binary sgle <= Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod
def_binary shge >= Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod

export: rename: _not as !
expr.macro '_not $right':
  ~op_stx self
  t.unify_do(right, t_s.lookup_type(right), t.Bool(self))
  t_s.wrap_type('! force($right)', t.Bool('$self $right'))

decl.macro 'def_equality $op $type_constr':
  '«export: rename: equals as $op
    expr.macro '$('$')left equals $('$')right':
      ~op_stx self
      ~weaker_than shplus shminus shtimes shdiv shmod
      let tv = t.gen_tvar(self)
      t.unify_do(left, t_s.lookup_type(left), tv)
      t.unify_do(right, t_s.lookup_type(right), tv)
      t_s.wrap_type('force_all($('$')left) == force_all($('$')right)', t.Bool(self))»'

def_equality ==
def_equality !=

export:
  rename:
    shand as &&
    shor as ||

meta:
  fun parse_bool(left, right, self, op):
    let bool = t.Bool(self)
    t.unify_do(self, t_s.lookup_type(left), bool)
    t.unify_do(self, t_s.lookup_type(right), bool)
    t_s.wrap_type('force($left) $op force($right)', bool)

expr.macro '$left shand $right':
  ~op_stx self
  ~stronger_than: shor
  ~weaker_than: ~other
  parse_bool(left, right, self, '&&')

expr.macro '$left shor $right':
  ~op_stx self
  ~weaker_than: ~other
  parse_bool(left, right, self, '||')
