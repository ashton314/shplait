#lang shplait/private/core
~accomodating

fun map(f :: ?a -> ?b, lst :: Listof(?a)) :: Listof(?b):
  match lst
  | []: []
  | cons(hd, tl): cons(f(hd), map(f, tl))

fun map2(f :: (?a, ?b) -> ?c, alst :: Listof(?a), blst :: Listof(?b)) :: Listof(?c):
  match alst
  | []:
      match blst
      | []: []
      | ~else: error(#'map2, "too many elements in second list")
  | cons(ahd, atl):
      match blst
      | cons(bhd, btl): cons(f(ahd, bhd), map2(f, atl, btl))
      | ~else: error(#'map2, "not enough elements in second list")

fun filter(pred, lst):
  match lst
  | []: []
  | cons(hd, tl): if pred(hd)
                  | cons(hd, filter(pred, tl))
                  | filter(pred, tl)

fun foldl(f, accum, lst):
  match lst
  | []: accum
  | cons(hd, tl): foldl(f, f(hd, accum), tl)

fun foldr(f, init, lst):
  match lst
  | []: init
  | cons(hd, tl): f(hd, foldr(f, init, tl))
