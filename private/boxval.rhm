#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "wrap.rhm" open
  "lazy.rhm" open

export:
  rename:
    make_box as box
  unbox
  set_box

class box (mutable val):
  implements: Forceable
  field lazy_forced = #false

  property
  | value:
      val
  | value := rhs:
      lazy_forced := #false
      val := rhs

  override force_all():
    unless lazy_forced
    | lazy_forced := box(#false)
      (lazy_forced :~ box).lazy_forced := lazy_forced
      (lazy_forced :~ box).val := dynamic_force_all(val)
    lazy_forced

defwrap box_wrap box(v): box(v)
defwrap unbox_wrap unbox(b): (dynamic_force(b) :~ box).value
defwrap set_box_wrap set_box(b, v): (dynamic_force(b) :~ box).value := v

expr.macro 'make_box':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('box_wrap'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv], t.BoxOf(self, tv))))

expr.macro 'unbox':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('unbox_wrap'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.BoxOf(self, tv)], tv)))

expr.macro 'set_box':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('set_box_wrap'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.BoxOf(self, tv), tv], t.Vd(self))))
