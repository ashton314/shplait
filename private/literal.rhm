#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value

export:
  rename literal as #%literal

meta:
  fun type_of_literal(lit :: Syntax):
    match lit.unwrap()
    | (_ :: Boolean): t.Bool(lit)
    | (_ :: String): t.Str(lit)
    | (_ :: Number): t.Num(lit)
    | (_ :: Char): t.Chr(lit)
    | (_ :: Void): t.Vd(lit)
    | (_ :: Keyword):
        syntax_meta.error("keyword is not allowed as an expression", lit)  
    | ~else:
        syntax_meta.error("literal type not known", lit)  

expr.macro 'literal $(lit :: Term) $tail ...':
  when (lit.unwrap() is_a Number) && !(lit.unwrap() is_a Int)
  | syntax_meta.error("non-integer numbers are not allowed", lit)
  values(t_s.wrap_type('(#%literal $lit)'.relocate_span([lit]), type_of_literal(lit)),
         '$tail ...')

value.macro
| 'literal $(lit :: Term)':
    t_s.type_to_syntax(type_of_literal(lit))
| 'literal $_ ...':
    // non-empty tail means more complex expression, assume non value
    '#false'
