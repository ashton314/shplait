#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "value.rhm".value_meta
  "wrap.rhm" open

export:
  rename:
    brackets as #%brackets
  first
  rest
  cons
  length

value.macro
| 'brackets []':
    ~op_stx self
    let tv = t.gen_tvar(self)  
    t_s.type_to_syntax(t.Poly(self, tv, t.ListOf(self, tv)))
| 'brackets [$(v :: value_meta.Parsed), ...]':
    def v0 = [v, ...][0]
    if (v0.unwrap()
          && (for all:
                each v: [v, ...]
                v.unwrap() == v0.unwrap()))
    | t_s.type_to_syntax(t.ListOf(#false, t_s.syntax_to_type(v0)))
    | '#false'
| 'brackets [$_, ...]':
    '#false'

expr.macro 'brackets $(elems && '[$(elem :: expr_meta.Parsed), ...]')':
  let tv = t.gen_tvar(#false)
  let [elem_exp, ...] = [expr_meta.parse_more(elem), ...]
  Function.pass(t.unify_do(elem_exp, tv, t_s.lookup_type(elem_exp)),
                ...)
  t_s.wrap_type('#%brackets [$elem_exp, ...]'.relocate_span([elems]),
                t.ListOf(elems, tv))

defwrap wrap_first first(l): List.first(l)
defwrap wrap_rest rest(l): List.rest(l)
defwrap wrap_cons cons(a, l): List.cons(a, l)
defwrap wrap_length length(l): List.length(l)

expr.macro 'first':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_first', t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv)], tv)))

expr.macro 'rest':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_rest', t.Poly(self, tv, t.Arrow(self, [ty], ty)))

expr.macro 'cons':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_cons', t.Poly(self, tv, t.Arrow(self, [tv, ty], ty)))

expr.macro 'length':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_length', t.Poly(self, tv, t.Arrow(self, [ty], t.Num(self))))
