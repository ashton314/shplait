#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value

export:
  rename:
    brackets as #%brackets
  first
  rest
  cons
  length

value.macro
| 'brackets []':
    ~op_stx self
    let tv = t.gen_tvar(self)  
    t_s.type_to_syntax(t.Poly(self, tv, t.ListOf(self, tv)))
| 'brackets [$_, ...]':
    '#false'

expr.macro 'brackets $(elems && '[$(elem :: expr_meta.Parsed), ...]')':
  let tv = t.gen_tvar(#false)
  let [elem_exp, ...] = [expr_meta.parse_more(elem), ...]
  Function.pass(t.unify_do(elem_exp, tv, t_s.lookup_type(elem_exp)),
                ...)
  t_s.wrap_type('#%brackets [$elem_exp, ...]'.relocate_span([elems]),
                t.ListOf(elems, tv))

expr.macro 'first':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('List.first', t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv)], tv)))

expr.macro 'rest':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('List.rest', t.Poly(self, tv, t.Arrow(self, [ty], ty)))

expr.macro 'cons':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('List.cons', t.Poly(self, tv, t.Arrow(self, [tv, ty], ty)))

expr.macro 'length':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('List.length', t.Poly(self, tv, t.Arrow(self, [ty], t.Num(self))))
