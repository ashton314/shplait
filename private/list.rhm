#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "value.rhm".value_meta
  "wrap.rhm" open
  "lazy.rhm" open

export:
  rename:
    brackets as #%brackets
  first
  rest
  cons

module for_map:
  export:
    meta:
      extract_common_type

value.macro
| 'brackets []':
    ~op_stx self
    let tv = t.gen_tvar(self)  
    t_s.type_to_syntax(t.Poly(self, tv, t.ListOf(self, tv)))
| 'brackets [$(v :: value_meta.Parsed), ...]':
    def v0 = extract_common_type([v, ...])
    if v0
    | t_s.type_to_syntax(t.ListOf(#false, t_s.syntax_to_type(v0)))
    | '#false'
| 'brackets [$_, ...]':
    '#false'

expr.macro 'brackets $(elems && '[$(elem :: expr_meta.Parsed), ...]')':
  let tv = t.gen_tvar(#false)
  let [[elem_ty, new_elem], ...] = [t_s.lookup_type(elem, elem.group), ...]
  Function.pass(t.unify_do(elem, tv, elem_ty), ...)
  t_s.wrap_type('#%brackets [delay($new_elem), ...]'.relocate_span([elems]),
                t.ListOf(elems, tv))

defwrap wrap_first first(l): Pair.first(dynamic_force(l))
defwrap wrap_rest rest(l): Pair.rest(dynamic_force(l))
defwrap wrap_cons cons(a, l): Pair.cons(a, l)

expr.macro 'first':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_first'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv)], tv)))

expr.macro 'rest':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_rest'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [ty], ty)))

expr.macro 'cons':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_cons'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv, ty], ty)))

meta:
  fun extract_common_type([v :~ Syntax, ...]):    
    def v0 = [v, ...][0]
    v0.unwrap()
      && (for all:
            each v: [v, ...]
            v.unwrap() == v0.unwrap())
      &&  v0
