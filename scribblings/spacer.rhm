#lang rhombus/static/and_meta

import:
  scribble/rhombus/spacer

export:
  only_space spacer.typeset:
    fun
    type

spacer.bridge fun(self, tail, context, esc):  
  ~in: ~expr ~defn
  recur loop (tail = tail):
    match tail
    | '': self
    | '$(esc_use :: Operator) $t $tail ...' when esc_use.unwrap_op() == esc.unwrap_op():
        let '$_ $new_tail ...' = loop('$tail ...')
        let new_self = spacer.set(self, #'~defn)
        '$new_self $esc_use $t $new_tail ...'
    | '$pre ...: $(b :: Block)':
        '$(loop('$pre ...')) $(spacer.adjust_term(b, context, esc))'
    | '$(name :: Identifier) ... $(parens && '($arg, ...)') $post ...':
        let new_args = '($(adjust_arg(arg, context, esc)), ...)'.relocate(parens)
        let new_post:
          match '$post ...'
          | '': ''
          | '$(op && '::') $ty ...':
              '$op $(spacer.adjust_sequence('$ty ...', #'#{shplait/type}, esc))'
          | '$other': other
        let new_self:
          match '$name ...'
          | '': spacer.set(self, #'~expr)
          | ~else: spacer.set(self, #'~defn)
        '$new_self $name ... $new_args $new_post'
    | ~else:
        error("no match: " +& tail)

spacer.bridge type(self, tail, context, esc):  
  ~in: ~decl
  match tail
  | '$name ... $(alts && '| $(ctr :: Block) | ...')':
      fun adjust_clause(clause):
        match clause
        | ': $name $(parens && '($arg, ...)')':
            ': $name $('($(adjust_arg(arg, context, esc)), ...)'.relocate(parens))'.relocate(clause)
        | ~else:
            clause
      let new_ctrs:
        Syntax.make([#'alts, adjust_clause(ctr), ...]).relocate(alts)
      '$self $name ... $new_ctrs'
  | '$other ...':
      '$self $other ...'

meta:
  fun adjust_arg(arg, context, esc):
    match arg
    | '$name ... $(op && '::') $ty ...':
        '$name ... $op $(spacer.adjust_sequence('$ty ...', #'#{shplait/type}, esc))'.relocate(arg)
    | ~else:
        arg
      