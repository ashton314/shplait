#lang shplait
~untyped

import:
  lib("racket/base.rkt")

check:
  first([1, base.cons])
  ~is 1

check:
  cons(1, base.cons(2, []))
  ~is [1, 2]

fun f(x :: Int):
  if x
  | 1 + "a"
  | "ok"

check:
  f(#false)
  ~is "ok"

// submodule should also be untyped
module test:
  fun f2(x :: Int):
    if x
    | 1 + "a"
    | "ok"
  check:
    f2(#false)
    ~is "ok"

check:
  let b = box(none()):
    set_box(b, some(b))
    b
  ~is (let b = box(some(box(none()))):
         set_box(b, some(b))
         b)

check:
  let b = box(none()):
    set_box(b, some(b))
    b
  ~is (let b0 = box(none()):
         let b = box(some(b0)):
           set_box(b0, some(b))
           b)
