#lang shplait
import:
  open: "eval.rhm" 

check_eval:
  fun f(x):
    match x
    | square(w, h): w+h
  ~raises "expected a variant name"

check_eval:
  type Shape
  | circle(r)
  | square(w, h)
  match circle(10)
  | square(w, h): w+h
  ~raises "missing 'circle' case"

check_eval:
  type Shape
  | circle(r)
  | square(w, h)
  match circle(10)
  | circle(r): r
  ~raises "missing 'square' case"

check_eval:
  type Shape
  | circle(r)
  | square(w, h)
  match circle(10)
  | circle(r): r
  | square(w, h): w+h
  | ~else: 0
  ~raises "else case is unreachable"

check_eval:
  type Shape
  | circle(r)
  | square(w, h)
  match circle(10)
  | circle(r): r
  | square(w, h): w+h
  | circle(r): r
  ~raises "duplicate case for variant"

check_eval:
  type Shape
  | circle(r)
  | square(w, h)
  match circle(10)
  | circle(r): r
  | circle(r): r
  ~raises "duplicate case for variant"

check_eval:
  type Shape
  | circle(r)
  | square(w, h)
  match circle(10)
  | circle(r): r
  | circle(r): r
  | ~else: 0
  ~raises "duplicate case for variant"

check_eval:
  type Point
  | point()
  type Shape
  | circle(r)
  | square(w, h)
  fun f(x):
    match x
    | circle(r): r
    | point(): 0
  ~raises "variant not from the same type as earlier variants"
