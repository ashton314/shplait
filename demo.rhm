#lang shplait

fun id(x): x

id(1)
id("x")

def n:
  block:
    def x = 10
    x

def m :: Number = 11

def values (n1, n2) = values(3, 4)
[n1, n2]

fun f(x :: ?a, y :: ?b):
  fun h(z :: ?c):
    z
  h("a")

f(1, "b")
f("ok", "b")

cons(1, [])
def g = []

fun sum(l :: Listof(Number)):
  if l == []
  | 0
  | first(l) + sum(rest(l))

if 1 == 2 | "yes" | "no"

// (a, Boolean) -> a
fun poly_rec(a, ok):
  if ok
  | a
  | poly_rec(a, #true)

cond
| ~else: "else"
         
cond
| 1 == 2: "no"
| ~else: "else"
                    
cond
| #true: "yes"
| ~else: "else"

#//
cond
| 1 == 2: "no"

type Shape
| circle(r)
| rectangle(w, h)

type Color
| rgb(r, g, b)
| cmyk(c, m, y, k)

match rectangle(10, 12)
| circle(x): x
| rectangle(x, y): x

circle.r(circle(22))
circle(22) is_a circle

match ["apple"]
| []: "ok"
| cons(f, r): f

type PosnOf(?a, ?b)
| oneD(x :: ?a)
| twoD(x :: ?a, y :: ?b)
  
fun combine(p, f):
  match p
  | oneD(x): x
  | twoD(x, y): f(x, y)
combine(twoD(1, "a"), fun (x, y): x + 0)

fun check_my_type(x :: Number * Number * String -> (String -> Number)):
  "x"

match 'y'
| 'x': "yes"
| '$other': "no"

match 'y z w; q'
| '$v ...; ...': '($v ...) ...'
| ~else: 'no'

syntax_is_number('9')
syntax_to_number('7')

'1 $(number_to_syntax(3 + 4)) 8'

type N = Number
fun fx(x :: N): x

module test:
  check:
    fx(10)
    ~is 10
  check:
    first([])
    ~raises "contract violation"

type Treeof(?a)
| leaf(v :: ?a)
| node(left :: Treeof(?a), right :: Treeof(?a))

node(leaf(1), leaf(2))
node(leaf("a"), leaf("b"))
